input {
  # NewsAPI Integration
  http_poller {
    urls => {
      newsapi_business => {
        method => get
        url => "https://newsapi.org/v2/everything"
        headers => {
          "X-Api-Key" => "${NEWSAPI_KEY}"
        }
        query => {
          "q" => "stocks OR investing OR finance OR market OR economy"
          "language" => "en"
          "sortBy" => "publishedAt"
          "pageSize" => "100"
        }
      }
    }
    request_timeout => 60
    interval => 300
    codec => "json"
    type => "news"
    tags => ["newsapi", "financial_news"]
  }
  
  # Financial RSS Feeds
  rss {
    url => "https://feeds.finance.yahoo.com/rss/2.0/headline"
    interval => 300
    type => "rss_news"
    tags => ["yahoo_finance", "rss"]
  }
  
  rss {
    url => "https://www.reuters.com/business/finance/rss"
    interval => 300
    type => "rss_news"
    tags => ["reuters", "rss"]
  }
  
  # MarketWatch RSS
  rss {
    url => "https://www.marketwatch.com/rss/topstories"
    interval => 300
    type => "rss_news"
    tags => ["marketwatch", "rss"]
  }
}

filter {
  # Parse timestamp
  if [type] == "news" {
    date {
      match => [ "publishedAt", "ISO8601" ]
      target => "@timestamp"
    }
    
    # Extract articles from NewsAPI response
    if [articles] {
      split { field => "articles" }
      mutate {
        rename => { "[articles][title]" => "title" }
        rename => { "[articles][description]" => "description" }
        rename => { "[articles][url]" => "url" }
        rename => { "[articles][source][name]" => "source" }
        rename => { "[articles][publishedAt]" => "published_at" }
        rename => { "[articles][content]" => "content" }
        rename => { "[articles][author]" => "author" }
        remove_field => ["articles"]
      }
    }
  }
  
  # Process RSS feeds
  if [type] == "rss_news" {
    mutate {
      rename => { "title" => "title" }
      rename => { "description" => "description" }
      rename => { "link" => "url" }
      add_field => { "source" => "%{[tags][0]}" }
    }
  }
  
  # Clean and normalize text
  mutate {
    strip => ["title", "description", "content"]
    gsub => [
      "title", "[\r\n]", " ",
      "description", "[\r\n]", " ",
      "content", "[\r\n]", " "
    ]
  }
  
  # Extract financial symbols and keywords
  grok {
    match => { 
      "title" => "(?<ticker_symbols>\b[A-Z]{1,5}\b)" 
      "description" => "(?<ticker_symbols>\b[A-Z]{1,5}\b)"
    }
    tag_on_failure => []
  }
  
  # Add financial keywords detection
  if [title] =~ /(?i)(earnings|revenue|profit|loss|dividend|acquisition|merger|ipo|stock|share|market|trading|investor|fund|portfolio|analyst|rating|upgrade|downgrade|bullish|bearish|rally|crash|volatility|fed|interest rate|inflation|gdp|unemployment)/ {
    mutate {
      add_tag => ["financial_relevant"]
    }
  }
  
  # Calculate content score
  ruby {
    code => "
      title_words = event.get('title').to_s.split.length
      desc_words = event.get('description').to_s.split.length
      content_score = title_words + desc_words
      event.set('content_score', content_score)
    "
  }
  
  # Add processing timestamp
  mutate {
    add_field => { "ingested_at" => "%{@timestamp}" }
    add_field => { "data_type" => "news" }
  }
}

output {
  # Send to Kafka for real-time processing
  kafka {
    topic_id => "market-news"
    bootstrap_servers => "kafka:9092"
    codec => json
  }
  
  # Index in Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "market-news-%{+YYYY.MM.dd}"
    document_type => "_doc"
    template_name => "market-news"
    template => "/usr/share/logstash/templates/news-template.json"
  }
  
  # Debug output
  if [type] == "news" {
    stdout { 
      codec => rubydebug {
        metadata => true
      }
    }
  }
}